// <auto-generated />
using System;
using GameLibApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GameLibApi.Migrations
{
    [DbContext(typeof(GameLibContext))]
    [Migration("20241009145407_GenreAndPlaformNamesMAdeUnique")]
    partial class GenreAndPlaformNamesMAdeUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GameLibApi.Entities.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("visibility")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("GameLibApi.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("MetaCritic")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameLibApi.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("GameLibApi.Entities.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("GameLibApi.Entities.RGameCatalog", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("CatalogId")
                        .HasColumnType("integer");

                    b.HasKey("GameId", "CatalogId");

                    b.HasIndex("CatalogId");

                    b.ToTable("RGameCatalogs");
                });

            modelBuilder.Entity("GameLibApi.Entities.RGameGenre", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("RGameGenres");
                });

            modelBuilder.Entity("GameLibApi.Entities.RGamePlatform", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("RGamePlatforms");
                });

            modelBuilder.Entity("GameLibApi.Entities.RGameCatalog", b =>
                {
                    b.HasOne("GameLibApi.Entities.Catalog", "Catalog")
                        .WithMany("RGameCatalogs")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameLibApi.Entities.Game", "Game")
                        .WithMany("RGameCatalogs")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameLibApi.Entities.RGameGenre", b =>
                {
                    b.HasOne("GameLibApi.Entities.Game", "Game")
                        .WithMany("RGameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameLibApi.Entities.Genre", "Genre")
                        .WithMany("RGameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameLibApi.Entities.RGamePlatform", b =>
                {
                    b.HasOne("GameLibApi.Entities.Game", "Game")
                        .WithMany("RGamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameLibApi.Entities.Platform", "Platform")
                        .WithMany("RGamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameLibApi.Entities.Catalog", b =>
                {
                    b.Navigation("RGameCatalogs");
                });

            modelBuilder.Entity("GameLibApi.Entities.Game", b =>
                {
                    b.Navigation("RGameCatalogs");

                    b.Navigation("RGameGenres");

                    b.Navigation("RGamePlatforms");
                });

            modelBuilder.Entity("GameLibApi.Entities.Genre", b =>
                {
                    b.Navigation("RGameGenres");
                });

            modelBuilder.Entity("GameLibApi.Entities.Platform", b =>
                {
                    b.Navigation("RGamePlatforms");
                });
#pragma warning restore 612, 618
        }
    }
}
